@model Structured_Programming.Models.ItemFormModel

@{
    ViewBag.Title = "Add";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="body-content">
    <div class="container">
        <div class="divider1"></div>
        <div class="head-style1">
            <h2>Add new item</h2>
        </div>
        <div class="show-grid-row">
            @using (Html.BeginForm("Add", "Item", FormMethod.Post, new { enctype = "multipart/form-data", @class = "contact_form" }))
            {
                @Html.AntiForgeryToken()
                
                <div class="span12">
                    @Html.LabelFor(m => m.Item.Name)
                    @Html.TextBoxFor(m => m.Item.Name, new { @class = "span8" })
                    <div class="error-msg">
                    @Html.ValidationMessageFor(m => m.Item.Name)
                    </div>
                </div>
                <div class="span12">
                    @Html.LabelFor(m => m.Item.Description)
                    @Html.TextBoxFor(m => m.Item.Description, new { @class = "span8" })
                    <div class="error-msg">
                    @Html.ValidationMessageFor(m => m.Item.Description)
                    </div>
                </div>
                <div class="span12">
                    @Html.LabelFor(m => m.Item.Price)
                    @Html.TextBoxFor(m => m.Item.Price, new { @class = "span8" })
                    <div class="error-msg">
                    @Html.ValidationMessageFor(m => m.Item.Price)
                    </div>
                </div>
                <div class="span12">
                    @Html.LabelFor(m => m.Item.Trade)
                    @Html.TextBoxFor(m => m.Item.Trade, new { @class = "span8" })
                    <div class="error-msg">
                    @Html.ValidationMessageFor(m => m.Item.Trade)
                    </div>
                </div>
                <div class="span12 ">
                    @Html.LabelFor(m => m.Image)
                    <script type="text/javascript">
                        function alertFilename() {
                            var fullPath = document.getElementById('image').value;
                            document.getElementById("file_info").value = fullPath.split(/(\\|\/)/g).pop();
                        }
                        function clearFileInput() {
                            document.getElementById("image").value = "";
                            alertFilename();
                        }
                    </script>
                    <div class="custom_file_upload">
                        <input type="text" class="file span6" name="file_info" readonly="readonly" id="file_info">
                        <div class="file_upload">
                            <input type="file" id="image" name="image" onchange="alertFilename();">
                        </div>
                    </div>

                </div>
                <div class="span12 custom-dropdown">
                    <label>Type</label>
                    <div class="styled-select">
                        @Html.DropDownListFor(m => m.Item.TypeId, Model.TypeList, new { @class = "custom-dropdown" })
                    </div>
                </div>
                <div class="span12">
                    <input class="btn send-btn" type="submit" value="Add" />
                    <input class="btn send-btn" type="button" value="Cancel Upload" onclick="clearFileInput();" />
                </div>
            }
        </div>
    </div>
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
